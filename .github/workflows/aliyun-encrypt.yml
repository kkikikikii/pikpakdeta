name: PikPak加密转存Aliyun
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      Folder:
        description: '保存目录'
        required: true
        default: 'opop'

jobs:
  Aria2-Aliyun:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 
      - name: gengxing
        run: |
           sudo apt-get update          
      - name: 检查空间使用情况
        run: |
          echo "Free space:"
          df -h
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:

        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
           tool-cache: true
           android: true
           dotnet: true
           haskell: true
           large-packages: true
           docker-images: false
           swap-storage: true   
         
      - name: 安装Aria2
        run: sudo apt install -y aria2 
      - name: 安装Python3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: 安装所需要的Python信赖
        run: |
          python -m pip install --upgrade pip wheel
          pip install install requests
      - name: 下载加密程序
        run: |
          curl -L -o dist.tar.gz https://github.com/ykxVK8yL5L/alist-encrypt/releases/download/0.0.1/dist.tar.gz
          tar -xzf dist.tar.gz
          
      - name: 下载文件
        id: downloading
        run: |
          mkdir downloads
          python task.py --projet="${{ secrets.DETA_PROJECT_ID }}" --apikey="${{ secrets.DETA_API_KEY }}" --act="download"
          filename=$(ls downloads | head -n1)
          echo "::set-output name=path::downloads/$filename"
          echo "::set-output name=filename::$filename"
          echo "::set-output name=taskkey::$taskkey"
          size=$(ls -l downloads/$filename | awk '{print $5}' )
          echo "::set-output name=size::$size"
          
      - name: 加密文件
        id: encrypt
        if: steps.downloading.outputs.filename != '' && !cancelled() && !failure()
        run: |
           ${{ github.workspace }}/dist/nodejs-linux '${{ secrets.ALIST_ENCRYPT_PASSWORD }}' aesctr enc '${{ github.workspace }}/downloads/' '${{ github.workspace }}/out/' encName
           filename=$(ls out | head -n1)
           sha1_s=`openssl sha1 out/$filename | awk '{ print $2 }'`
           header="OC-Checksum:sha1:$sha1_s"
           echo "::set-output name=header::$header"
           echo "::set-output name=filename::$filename"
           echo "::set-output name=path::out/$filename"
           size=$(ls -l out/$filename | awk '{print $5}' )
           echo "::set-output name=size::$size"
          
      
      - name: 上传gdcloud
        uses: wei/rclone@v1
        if: steps.encrypt.outputs.filename != '' && !cancelled() && !failure()
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
        with:
          args: copy ${{ steps.encrypt.outputs.path }}  onedrive:${{ github.event.inputs.Folder}}/${{ steps.downloading.encrypt.filename }}
          
          
      - name: 保存数据，删除远程已经下载列表
        id:  database
        if: steps.encrypt.outputs.filename != '' && !cancelled() && !failure()
        run: |
          python task.py --projet="${{ secrets.DETA_PROJECT_ID }}" --apikey="${{ secrets.DETA_API_KEY }}" --taskkey="${{ steps.downloading.outputs.taskkey }}" --act="del"
          echo "::set-output name=status::ok"
          
      - name: 开启新的下载任务
        uses: benc-uk/workflow-dispatch@v1
        if: steps.encrypt.outputs.filename != '' && !cancelled() && !failure()
        with:
          workflow: aliyun-encrypt.yml
          ref: main
        
      - name: 删除旧的上传记录
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
